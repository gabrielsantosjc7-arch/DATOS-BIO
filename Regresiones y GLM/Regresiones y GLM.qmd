## Visualización inicial + correlación

```{r}
#| label: scatter_cor
#| fig-cap: "Scatter con línea de regresión entre las variables biil length y flipper length."
# Scatter con línea de regresión (usa df ya limpio)
ggplot(df, aes(x = flipper_length_mm, y = bill_length_mm)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = TRUE, formula = y ~ x) +
  labs(x = "Flipper length (mm)", y = "Bill length (mm)",
       title = "Relación bill_length_mm ~ flipper_length_mm") +
  theme_minimal()

```
```{r}
#| label: coeficientes_cor
# Correlación Pearson y Spearman (devuelven objetos htest)
cor_pearson <- cor.test(df$flipper_length_mm, df$bill_length_mm, 
                        method = "pearson")
cor_spearman <- cor.test(df$flipper_length_mm, df$bill_length_mm, 
                         method = "spearman")
# Correlación Pearson
pearson_tab <- broom::tidy(cor_pearson) %>%
  select(estimate, statistic, p.value, conf.low, conf.high) %>%
  mutate(
    p.value = ifelse(p.value < 0.001, "< 0.001", round(p.value, 3)),
    across(where(is.numeric), round, 3)
  )

knitr::kable(pearson_tab, caption = "Correlación de Pearson 
             entre bill_length y flipper_length")

# Correlación Spearman
spearman_tab <- broom::tidy(cor_spearman) %>%
  select(estimate, statistic, p.value) %>%
  mutate(
    p.value = ifelse(p.value < 0.001, "< 0.001", round(p.value, 3)),
    across(where(is.numeric), round, 3)
  )

knitr::kable(spearman_tab, caption = "Correlación de Spearman 
             entre bill_length y flipper_length")
```
## Modelo lineal simple

```{r}
#| label: fit_lm
# Ajuste del modelo lineal simple
modelo_lm <- lm(bill_length_mm ~ flipper_length_mm, data = df)

# Coeficientes y resumen del ajuste
tidy_lm <- broom::tidy(modelo_lm)
glance_lm <- broom::glance(modelo_lm)

# Tablas presentables para Quarto
knitr::kable(tidy_lm, caption = "Coeficientes del modelo lineal 
             (bill_length ~ flipper_length)")
knitr::kable(glance_lm, caption = "Resumen del ajuste (R², AIC, BIC, etc.)")

```{r}
#| label: intervals
# IC 95% para coeficientes directamente con confint
ic_coef <- as.data.frame(confint(modelo_lm)) %>%
  tibble::rownames_to_column("term")

knitr::kable(
  ic_coef,
  caption = "Intervalos de confianza (95%) 
  para los coeficientes del modelo lineal",
  digits = 3,
  format = "markdown"
)

#| label: predict
# Predicción de la media y predicción individual, en formato tabla kable
newdata <- tibble(flipper_length_mm = c(180, 200))

pred_conf <- predict(modelo_lm, newdata, interval = "confidence", level = 0.95)
pred_pred <- predict(modelo_lm, newdata, interval = "prediction", level = 0.95)

tabla_pred <- tibble(
  flipper_length_mm = newdata$flipper_length_mm,
  fit = pred_conf[, "fit"],
  lwr_conf = pred_conf[, "lwr"],
  upr_conf = pred_conf[, "upr"],
  lwr_pred = pred_pred[, "lwr"],
  upr_pred = pred_pred[, "upr"]
)

knitr::kable(
  tabla_pred,
  caption = "Intervalos de confianza y predicción (95%) 
  de la longitud del pico para valores de 180 y 200 mm de aleta",
  digits = 2,
  format = "markdown"
)

```
```{r}
#| label: Residuos y fitted
#| fig-cap: "Gráfico de dispersión entre los residuales y los valores ajustados."
# Residuos y fitted
residuales <- residuals(modelo_lm)
fittedv    <- fitted(modelo_lm)
n <- nrow(df)
k <- length(coef(modelo_lm)) - 1  # número de predictores


df_diag <- tibble(fitted = fittedv, resid = residuales)
ggplot(df_diag, aes(x = fitted, y = resid)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "loess", se = FALSE, color = "red") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residuales vs Fitted", x = "Valores ajustados", 
       y = "Residuales")
```

```{r}
#| label: QQ-plot
#| fig-cap: "Gráfico QQ-plot residuos."
#QQ-plot (visual)
ggplot(tibble(resid = residuales), aes(sample = resid)) +
  stat_qq() + stat_qq_line() + labs(title = "QQ-plot de residuos")
```

```{r}
#| label: Supuestos
# Tests de supuestos

# Shapiro-Wilk (normalidad)
shapiro_res <- broom::tidy(shapiro.test(residuales)) %>%
  mutate(test = "Shapiro-Wilk")

# Breusch-Pagan (heterocedasticidad)
bptest_res <- broom::tidy(lmtest::bptest(modelo_lm)) %>%
  mutate(test = "Breusch-Pagan")

# Durbin-Watson (autocorrelación de residuos)
dw_res <- broom::tidy(lmtest::dwtest(modelo_lm)) %>%
  mutate(test = "Durbin-Watson")

# Juntar en tabla y ajustar p-values
tests_table <- bind_rows(shapiro_res, bptest_res, dw_res) %>%
  select(test, statistic, p.value, method) %>%
  mutate(
    p.value = case_when(
      p.value < 0.001 ~ "< 0.001",
      TRUE ~ as.character(round(p.value, 3))
    ),
    statistic = round(statistic, 3)
  )

knitr::kable(tests_table, caption = "Resultados de los tests 
             de supuestos del modelo lineal")

```
```{r}
#| label: Influencia
# Calcular medidas de influencia
cooks <- cooks.distance(modelo_lm)
hatv  <- hatvalues(modelo_lm)
rstudent_vals <- rstudent(modelo_lm)

# Crear tabla con observaciones influyentes
influential <- tibble(
  index = seq_along(cooks),
  cooks = cooks,
  hat = hatv,
  rstudent = rstudent_vals
) %>%
  mutate(
    cooks_flag = cooks > (4/length(cooks)),
    rstudent_flag = abs(rstudent) > 3,
    hat_flag = hat > (2*(k+1)/n)
  ) %>%
  filter(cooks_flag | rstudent_flag | hat_flag) %>%
  arrange(desc(cooks)) %>%
  mutate(across(where(is.numeric), round, 3))

knitr::kable(influential, caption = "Observaciones potencialmente 
             influyentes (Cook’s distance, leverage, residuos studentizados)")

```
## Outliers / puntos influyentes

```{r}
#| label: Comparacion
# Crear modelo sin observaciones influyentes y comparar coeficientes
in_idx <- influential$index

if(length(in_idx) > 0){
  modelo_lm_noinf <- lm(bill_length_mm ~ flipper_length_mm,
                        data = df[-in_idx, ])
  
  compare_coefs <- tibble(
    original = broom::tidy(modelo_lm)$estimate,
    no_influ = broom::tidy(modelo_lm_noinf)$estimate
  )
  
  knitr::kable(
    compare_coefs %>%
      mutate(across(where(is.numeric), round, 3)) %>%
      rename("Modelo original" = original,
             "Modelo sin influyentes" = no_influ),
    caption = "Comparación de coeficientes estimados con 
    y sin observaciones influyentes."
  )
} else {
  "No se detectaron observaciones influyentes con los umbrales establecidos."
}

#| label: modelo-multiple
# Modelo de regresión múltiple: bill_length ~ flipper_length + species
modelo_lm_multi <- lm(bill_length_mm ~ flipper_length_mm + species, data = df)

# Resumen de coeficientes
tabla_multi <- broom::tidy(modelo_lm_multi, conf.int = TRUE)

knitr::kable(
  tabla_multi %>%
    mutate(across(where(is.numeric), round, 3)),
  caption = "Coeficientes estimados del modelo lineal múltiple 
  (longitud del pico como variable respuesta)."
)

```
```{r}
# Métricas generales del modelo
tabla_multi_glance <- broom::glance(modelo_lm_multi)

knitr::kable(
  tabla_multi_glance %>%
  caption = "Estadísticos de ajuste del modelo múltiple."
)
```
```{r}
#| label: comparacion-modelos

# Comparar modelo simple vs múltiple
modelo_simple <- lm(bill_length_mm ~ flipper_length_mm, data = df)
modelo_multiple <- lm(bill_length_mm ~ flipper_length_mm + species, data = df)

# Extraer métricas de ajuste
comp_models <- bind_rows(
  broom::glance(modelo_simple) %>% mutate(modelo = "Simple"),
  broom::glance(modelo_multiple) %>% mutate(modelo = "Múltiple")
) %>%
  select(modelo, r.squared, adj.r.squared, AIC, BIC, sigma, p.value) %>%
  mutate(across(where(is.numeric), ~round(., 3)))

knitr::kable(comp_models,
             caption = "Comparación entre el modelo 
             lineal simple y múltiple")

```
