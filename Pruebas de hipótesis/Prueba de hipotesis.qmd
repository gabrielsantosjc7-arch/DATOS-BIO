## Verificación de supuestos

```{r}
#| label: supuestos-anova
modelo <- aov(bill_length_mm ~ species, data = df)                                  

# Normalidad de residuos
Normalidad <- shapiro.test(residuals(modelo))

# Homogeneidad de varianzas (Levene)
Homogeneidad <- leveneTest(bill_length_mm ~ species, data = df)

# Tablas
knitr::kable(
  broom::tidy(Normalidad),
  caption = "Test de normalidad de residuos (Shapiro-Wilk)"
)

knitr::kable(
  broom::tidy(Homogeneidad),
  caption = "Test de homogeneidad de varianzas (Levene)"
)

```

## Ejeccución del Kruskal-Wallis global

```{r}
#| label: kruskal_global

# Kruskal-Wallis (global)
kruskal_res <- df %>% kruskal_test(bill_length_mm ~ species)

# Formatear p-value como p < 0.001 si es muy pequeño
kruskal_res <- kruskal_res %>%
  mutate(p = ifelse(p < 0.001, "< 0.001", round(p, 3)))

knitr::kable(kruskal_res, caption = "Prueba Kruskal-Wallis global")


```
```{r}
#| label: epsilon-squared

# Tamaño de efecto (epsilon-squared)
Efe <- df %>% kruskal_effsize(bill_length_mm ~ species)
knitr::kable(Efe, caption = "Tamaño de efecto (epsilon-squared)")
```

## Comparaciones post-hoc (Dunn, corrección Bonferroni)

```{r}
#| label: dunn_posthoc

# Dunn test con corrección Bonferroni
dunn_res <- df %>%
  dunn_test(bill_length_mm ~ species, p.adjust.method = "bonferroni") %>%
  mutate(p = ifelse(p < 0.001, "< 0.001", round(p, 3)),
         p.adj = ifelse(p.adj < 0.001, "< 0.001", round(p.adj, 3)))

knitr::kable(dunn_res, caption = "Comparaciones post-hoc (Dunn, Bonferroni)")




```{r}
#| label: boxplot_kruskal
#| fig-cap: "Boxplot de bill_length_mm por especie con comparaciones post-hoc (Dunn)."
#| fig-width: 6
#| fig-height: 4

# Añadir posiciones y columnas útiles para gráficas
dunn_res <- dunn_res %>% add_xy_position(x = "species")

# Calcula un y-position razonable para las etiquetas
y_max <- max(df$bill_length_mm, na.rm = TRUE)
dunn_res <- dunn_res %>% mutate(y.position = y_max + seq(0.5, by = 0.5, 
  length.out = nrow(dunn_res)))

p <- ggplot(df, aes(x = species, y = bill_length_mm, fill = species)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.15, alpha = 0.5, size = 1) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "Especie", y = "Largo del pico (mm)",
       title = "Comparación del largo del pico entre especies")

# Añadir anotaciones de p ajustadas
p + ggpubr::stat_pvalue_manual(dunn_res, label = "p.adj.signif", 
    tip.length = 0.01)

```
## Anova con transformación logarítmica

```{r}
#| label: anova_log_supuestos

df <- df %>%
  mutate(log_bill_length = log(bill_length_mm))
modelo_log <- aov(log_bill_length ~ species, data = df)

# Supuestos
shapiro_res <- shapiro.test(residuals(modelo_log))
levene_res  <- leveneTest(log_bill_length ~ species, data = df)

# Tablas
knitr::kable(
  broom::tidy(shapiro_res),
  caption = "Test de normalidad de residuos (Shapiro-Wilk)"
)
knitr::kable(
  broom::tidy(levene_res),
  caption = "Test de homogeneidad de varianzas (Levene)"
)

```
## Comparaciones post-hoc (Tukey HSD)

```{r}
#| label: tukey_log

tukey_res <- TukeyHSD(modelo_log)

tukey_table <- broom::tidy(tukey_res) %>%
  mutate(
    adj.p.value = case_when(
      adj.p.value < 0.001 ~ "< 0.001",
      TRUE ~ as.character(round(adj.p.value, 3))
    ),
    signif = case_when(
      adj.p.value == "< 0.001" ~ "***",
      as.numeric(adj.p.value) < 0.01  ~ "**",
      as.numeric(adj.p.value) < 0.05  ~ "*",
      TRUE ~ "ns"
    )
  )

knitr::kable(
  tukey_table,
  caption = "Comparaciones post-hoc (Tukey HSD)"
)
```
