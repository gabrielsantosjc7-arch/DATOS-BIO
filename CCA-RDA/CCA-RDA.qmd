## Preparación de datos y transformaciones

```{r}
#| label: tbl-cca-dimensiones
#| tbl-cap: "Dimensiones de los conjuntos de datos biológicos (varespec) y ambientales (varechem)"
#| warning: false
#| message: false

#  Comprobar dimensiones de las matrices

dims <- tibble(
objeto = c("varespec (especies)", "varechem (ambientales)"),
filas = c(nrow(varespec), nrow(varechem)),
columnas = c(ncol(varespec), ncol(varechem))
)
knitr::kable(dims)

```

```{r}
#| label: tbl-cca-ceros
#| tbl-cap: "Proporción de ceros en las primeras seis especies de la matriz de abundancias"
#| warning: false
#| message: false

#  Revisar rareza (proporción de ceros)

zero_prop <- tibble(
variable = colnames(varespec),
prop_zero = colSums(varespec == 0) / nrow(varespec)
)

zero_prop %>%
arrange(desc(prop_zero)) %>%
head(6) %>%
knitr::kable(digits = 3)

```

```{r}
#| label: code-cca-transform
#| echo: true
#| results: 'hide'
#| warning: false

# Transformaciones para análisis

varespec_hel <- decostand(varespec, method = "hellinger")  # para RDA
varespec_log  <- decostand(varespec, method = "log", na.rm = TRUE)  # para CCA

#  Escalar variables ambientales

varechem_scaled <- scale(varechem)

```
```{r}
#| label: tbl-cca-rda-vif
#| tbl-cap: "VIF (inflación de la varianza) para variables ambientales (modelo RDA preliminar)"

# Modelo RDA preliminar para evaluar VIF
rda_prelim <- rda(varespec_hel ~ ., data = as.data.frame(varechem_scaled))
vif_vals <- vif.cca(rda_prelim)  # VIF por variable en vegan
vif_tbl <- tibble(variable = names(vif_vals), VIF = round(vif_vals, 3))
knitr::kable(vif_tbl)

```
```{r}
#| label: tbl-anova-global-rda
#| tbl-cap: "ANOVA global RDA depurado (permutaciones)"
#| warning: false
#| message: false

#  Calcular VIF para identificar colinealidad

vif_vals <- vif.cca(rda(varespec_hel ~ .,
data = as.data.frame(varechem_scaled)))
vif_tbl <- tibble(variable = names(vif_vals), VIF = vif_vals)

# Seleccionar variables con VIF <= 10

vars_select <- vif_tbl %>%
filter(VIF <= 10) %>%
pull(variable)

# Ajustar modelo RDA con variables depuradas

form <- as.formula(paste("varespec_hel ~", paste(vars_select,
collapse = " + ")))
rda_mod2 <- rda(form, data = as.data.frame(varechem_scaled))

# Evaluaciones estadísticas

anova_rda_global <- anova.cca(rda_mod2, permutations = 999)
anova_rda_axes   <- anova.cca(rda_mod2, by = "axis", permutations = 999)
anova_rda_terms  <- anova.cca(rda_mod2, by = "terms", permutations = 999)

# Tabla de resultados

knitr::kable(broom::tidy(anova_rda_global))


```{r}
#| label: tbl-anova-ejes-rda
#| tbl-cap: "ANOVA por ejes RDA depurado"
#| warning: false
#| message: false

# Tabla ANOVA por ejes

knitr::kable(broom::tidy(anova_rda_axes))

```

```{r}
#| label: tbl-anova-terminos-rda
#| tbl-cap: "ANOVA por términos RDA depurado (cada variable)"
#| warning: false
#| message: false

# Tabla ANOVA por términos

knitr::kable(broom::tidy(anova_rda_terms))

```

```{r}
#| label: fig-rda-biplot
#| fig-cap: "Biplot RDA: sitios, especies y variables ambientales (RDA sobre transformaciones Hellinger)"
#| fig-width: 7
#| fig-height: 6
#| warning: false
#| message: false

# Extraer scores del modelo RDA depurado
site_scr <- scores(rda_mod2, display = "sites")
sp_scr   <- scores(rda_mod2, display = "species")
env_scr  <- scores(rda_mod2, display = "bp")  # bp = biplot scores 

# Convertir a tibble con nombres
site_df <- as_tibble(site_scr, rownames = "site")
sp_df   <- as_tibble(sp_scr, rownames = "species")
env_df  <- as_tibble(env_scr, rownames = "var")

# Graficar biplot diferenciado
ggplot() +
  # Puntos de sitios (azul)
  geom_point(data = site_df, aes(x = RDA1, y = RDA2), color = "#1f77b4", 
             size = 3, alpha = 0.8) +
  geom_text_repel(data = site_df, aes(x = RDA1, y = RDA2, label = site), 
                  size = 3, color = "#1f77b4") +
  
  # Puntos de especies (rojo)
  geom_point(data = sp_df, aes(x = RDA1, y = RDA2), color = "#d62728", 
             size = 2, alpha = 0.7) +
  geom_text_repel(data = sp_df, aes(x = RDA1, y = RDA2, label = species), 
                  size = 2.5, color = "#d62728") +
  
  # Vectores ambientales (negros)
  geom_segment(data = env_df, aes(x = 0, y = 0, xend = RDA1, yend = RDA2),
               arrow = arrow(length = unit(0.25, "cm")), color = "black") +
  geom_text_repel(data = env_df, aes(x = RDA1, y = RDA2, label = var), 
                  size = 3, color = "black") +
  
  # Etiquetas y tema
  labs(title = "Biplot RDA (RDA1 vs RDA2)",
       x = "RDA1", y = "RDA2") +
  theme_minimal(base_size = 12)

## CCA: ajuste, tests y resumen

```{r}
#| label: tbl-cca-mod
#| tbl-cap: "Modelo CCA completo"
#| warning: false
#| message: false

# Usar mismas variables depuradas que en RDA
form_cca <- as.formula(paste("varespec ~", paste(vars_select, 
                       collapse = " + ")))

# Ajustar modelo
cca_mod <- cca(form_cca, data = as.data.frame(varechem_scaled))

# Pruebas de significancia
anova_cca_global <- anova.cca(cca_mod, permutations = 999)
anova_cca_axes   <- anova.cca(cca_mod, by = "axis", permutations = 999)
anova_cca_terms  <- anova.cca(cca_mod, by = "terms", permutations = 999)

# Tabla de inercia
cca_inertia <- data.frame(
  Componente = c("Total", "Constrained", "Unconstrained"),
  Inercia = c(cca_mod$tot.chi, cca_mod$CCA$tot.chi, cca_mod$CA$tot.chi)
) %>%
  mutate(Proporción = Inercia / cca_mod$tot.chi)

knitr::kable(cca_inertia)

```{r}
#| label: tbl-anova-global-cca
#| warning: false
#| message: false
#| tbl-cap: "ANOVA global del modelo CCA (permutaciones = 999)"

knitr::kable(broom::tidy(anova_cca_global))

```{r}
#| label: tbl-anova-ejes-cca
#| warning: false
#| message: false
#| tbl-cap: "ANOVA por ejes CCA"

knitr::kable(broom::tidy(anova_cca_axes))

```{r}
#| label: tbl-anova-terminos-cca
#| warning: false
#| message: false
#| tbl-cap: "ANOVA por términos CCA (cada variable ambiental)"

knitr::kable(broom::tidy(anova_cca_terms))

```{r}
#| label: fig-cca-biplot
#| fig-cap: "Biplot CCA: diferenciación de sitios, especies y variables ambientales"
#| fig-width: 7
#| fig-height: 6
#| warning: false
#| message: false

# Extraer scores del modelo CCA
site_scr <- scores(cca_mod, display = "sites")
sp_scr   <- scores(cca_mod, display = "species")
env_scr  <- scores(cca_mod, display = "bp")

# Convertir a tibbles
site_df <- as_tibble(site_scr) %>% mutate(site = rownames(site_scr))
sp_df   <- as_tibble(sp_scr) %>% mutate(species = rownames(sp_scr))
env_df  <- as_tibble(env_scr) %>% mutate(var = rownames(env_scr))

# Graficar
ggplot() +
  # Sitios
  geom_point(data = site_df, aes(x = CCA1, y = CCA2), 
             color = "#1f77b4", size = 3, alpha = 0.8) +
  geom_text_repel(data = site_df, aes(x = CCA1, y = CCA2, label = site),
                  size = 3, color = "#1f77b4") +
  
  # Especies
  geom_point(data = sp_df, aes(x = CCA1, y = CCA2), 
             color = "#d62728", size = 2, alpha = 0.8) +
  geom_text_repel(data = sp_df, aes(x = CCA1, y = CCA2, label = species),
                  size = 2.5, color = "#d62728") +
  
  # Variables ambientales (flechas)
  geom_segment(data = env_df, aes(x = 0, y = 0, xend = CCA1, yend = CCA2),
               arrow = arrow(length = unit(0.25, "cm")), color = "black") +
  geom_text_repel(data = env_df, aes(x = CCA1, y = CCA2, label = var),
                  size = 3, color = "black", fontface = "bold") +
  
  labs(title = "Biplot CCA (CCA1 vs CCA2)",
       x = "CCA1", y = "CCA2") +
  theme_minimal()
